// Chosen Order is a plugin for Chosen
// It allows you to handle the order of the selection
// Full source at https://github.com/tristanjahier/chosen-order
// Copyright (c) 2013 - Tristan Jahier, http://tristan-jahier.fr

// DISCLAIMER
// Chosen Order is not associated with Harvest in any way.
// Chosen is an original software by Patrick Filler for Harvest, http://getharvest.com
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// This file is generated by `grunt build`, do not edit it by hand.
(function() {
  var $, AbstractChosenOrder, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AbstractChosenOrder = (function() {
    var ERRORS, forceSelection, getChosenUIElement, insertAt, isChosenified, validMultipleSelectElement;

    function AbstractChosenOrder() {}

    ERRORS = {
      invalid_select_element: "ChosenOrder::{{function}}: first argument must be a valid HTML Multiple Select element that has been Chosenified!",
      invalid_selection_array: "ChosenOrder::{{function}}: second argument must be an Array!"
    };

    insertAt = function(node, index, parent) {
      return parent.insertBefore(node, parent.children[index].nextSibling);
    };

    validMultipleSelectElement = function(element) {
      return element !== null && typeof element !== "undefined" && element.nodeName === "SELECT" && element.multiple;
    };

    getChosenUIElement = function(select) {
      return document.getElementById(select.id.replace(/-/g, "_") + "_chosen");
    };

    isChosenified = function(select) {
      return getChosenUIElement(select) != null;
    };

    forceSelection = function(selection) {
      var i, opt, options, _ref;
      options = this.children;
      i = 0;
      while (i < options.length) {
        opt = options[i];
        if (_ref = opt.getAttribute("value"), __indexOf.call(selection, _ref) >= 0) {
          opt.selected = true;
          opt.setAttribute("selected", "");
        } else {
          opt.selected = false;
          opt.removeAttribute("selected");
        }
        i++;
      }
      return triggerEvent(this, "chosen:updated");
    };

    AbstractChosenOrder.getSelectionOrder = function(select) {
      var chosen_options, chosen_ui, close_btn, opt, option, options, order, rel, _i, _len;
      if (typeof retrieveDOMElement !== "undefined" && retrieveDOMElement !== null) {
        select = retrieveDOMElement(select);
      }
      if (validMultipleSelectElement(select) && isChosenified(select)) {
        chosen_ui = getChosenUIElement(select);
        chosen_options = chosen_ui.getElementsByClassName('search-choice');
        order = [];
        for (_i = 0, _len = chosen_options.length; _i < _len; _i++) {
          opt = chosen_options[_i];
          close_btn = opt.getElementsByClassName('search-choice-close')[0];
          if (close_btn != null) {
            rel = close_btn.getAttribute(this.relAttributeName);
          }
          options = Array.prototype.filter.call(select.childNodes, function(o) {
            return o.nodeName === 'OPTION';
          });
          option = options[rel];
          order.push(option.value);
        }
        return order;
      } else {
        return console.error(ERRORS.invalid_select_element.replace('{{function}}', 'getSelectionOrder'));
      }
    };

    AbstractChosenOrder.setSelectionOrder = function(select, order, force) {
      var chosen_choices, chosen_options, chosen_ui, i, opt, option, rel, relAttributeName, _i, _len, _results;
      if (typeof retrieveDOMElement !== "undefined" && retrieveDOMElement !== null) {
        select = retrieveDOMElement(select);
      }
      if (validMultipleSelectElement(select) && isChosenified(select)) {
        if (order instanceof Array) {
          order = order.map(Function.prototype.call, String.prototype.trim);
          if ((force != null) && force === true) {
            forceSelection.call(select, order);
          }
          chosen_ui = getChosenUIElement(select);
          _results = [];
          for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
            opt = order[i];
            rel = Array.prototype.indexOf.call(select, select.querySelector("option[value=\"" + opt + "\"]"));
            chosen_options = chosen_ui.getElementsByClassName('search-choice');
            relAttributeName = this.relAttributeName;
            option = Array.prototype.filter.call(chosen_options, function(o) {
              return o.querySelector("a.search-choice-close[" + relAttributeName + "=\"" + rel + "\"]") != null;
            })[0];
            chosen_choices = chosen_ui.querySelector("ul.chosen-choices");
            _results.push(insertAt(option, i, chosen_ui.querySelector('ul.chosen-choices')));
          }
          return _results;
        } else {
          return console.error(ERRORS.invalid_selection_array.replace('{{function}}', 'setSelectionOrder'));
        }
      } else {
        return console.error(ERRORS.invalid_select_element.replace('{{function}}', 'setSelectionOrder'));
      }
    };

    return AbstractChosenOrder;

  })();

  $ = jQuery;

  $.fn.extend({
    getSelectionOrder: function() {
      return ChosenOrder.getSelectionOrder(this);
    },
    setSelectionOrder: function(order, force) {
      return ChosenOrder.setSelectionOrder(this, order, force);
    }
  });

  this.ChosenOrder = (function(_super) {
    var isjQueryObject;

    __extends(ChosenOrder, _super);

    function ChosenOrder() {
      _ref = ChosenOrder.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ChosenOrder.relAttributeName = 'data-option-array-index';

    isjQueryObject = function(obj) {
      return (typeof jQuery !== "undefined" && jQuery !== null) && obj instanceof jQuery;
    };

    parent.retrieveDOMElement = function(element) {
      if (isjQueryObject(element)) {
        return element.get(0);
      } else {
        return element;
      }
    };

    parent.triggerEvent = function(target, event_name) {
      return $(target).trigger(event_name);
    };

    return ChosenOrder;

  })(AbstractChosenOrder);

}).call(this);
